<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:components="com.github.izerui.file.components.*"
         creationComplete="loadServers()">

    <fx:Script>
		<![CDATA[
        import com.github.izerui.file.components.loading.LoaderManager;
        import com.github.izerui.file.controls.titlewin.AlertWindow;
        import com.github.izerui.file.controls.titlewin.DetailTitleWindow;
        import com.github.izerui.file.controls.titlewin.NewService;
        import com.github.izerui.file.controls.uploader.ServletUploader;
        import com.github.izerui.file.event.DeployEvent;
        import com.github.izerui.file.event.FileUploadEvent;
        import com.github.izerui.file.event.I18nEvent;
        import com.github.izerui.file.utils.RemoteObjectUtils;
        import com.github.izerui.file.vo.FileItem;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.Application;
        import mx.core.FlexGlobals;
        import mx.events.ItemClickEvent;
        import mx.events.ListEvent;
        import mx.formatters.DateFormatter;
        import mx.managers.PopUpManager;
        import mx.rpc.events.ResultEvent;
        import mx.utils.ObjectUtil;

        [Bindable]
        private var dataList:ArrayCollection;

        [Embed("/assets/img/Server.png")]
        private var serverImg:Class;

        public function loadFiles():void {
            LoaderManager.showLoading();

            var server:String = "";
            if (serverList.selectedIndex != -1) {
                server = serverList.selectedItem.Name;
            }
            var selFileId:String = null;
            if (myFileGrid.selectedIndex != -1) {
                selFileId = myFileGrid.selectedItem.id;
            }
            RemoteObjectUtils.execute("fileService", "listFiles", function (event:Object) {
                LoaderManager.hideLoading();
                dataList = ArrayCollection(event.result);
                filterResult();
                if (selFileId) {
                    for (var i = 0; i < dataList.length; i++) {
                        var item:FileItem = dataList[i];
                        if (item.id == selFileId) {
                            myFileGrid.selectedIndex = i;
                            myFileGrid.scrollToIndex(i);
                            break;
                        }
                    }
                }
            }, server);

        }


        protected function filterResult():void {
            if (!searchKey.text) {
                myFileGrid.dataProvider = dataList;
                return;
            }
            var tempSearchList:ArrayCollection = new ArrayCollection;

            for each (var fi:FileItem in dataList) {
                if (fi.fileName.indexOf(searchKey.text) != -1) {
                    tempSearchList.addItem(ObjectUtil.clone(fi));
                }
            }
            myFileGrid.dataProvider = tempSearchList;
        }

        private function formatDate(item:Object, column:DataGridColumn):String {
            var df:DateFormatter = new DateFormatter();
            df.formatString = "YYYY-MM-DD HH:NN:SS";
            return df.format(item[column.dataField]);// df是一个DateFormatter，这里格式化item数据中的startDate字段
        }

        private function loadServers():void {
            LoaderManager.showLoading();
            RemoteObjectUtils.execute("ucloudService", "getDescribeUHostInstance", function (event:ResultEvent) {
                LoaderManager.hideLoading();
                var json:String = String(event.result);
                var data:Object = JSON.parse(json);
                serverList.dataProvider = data.UHostSet;
                ArrayCollection(serverList.dataProvider).addItem({
                    Name: "全部"
                });
                if (serverList.dataProvider && serverList.dataProvider.length > 0) {
                    serverList.selectedIndex = serverList.dataProvider.length - 1;
                }
                loadFiles();
            })
        }

        private function i18nResourceChange(event:I18nEvent):void {
            (linkButtonBar.dataProvider as ArrayCollection).refresh();
        }

        [Bindable]
        [Embed(source="/assets/img/bar_img/back.png")]
        private var button1_class:Class;

        protected function linkButtonBar_itemClickHandler(event:ItemClickEvent):void {
            switch (event.item["itemData"]) {
                case 100: {
//                    RemoteObjectUtils.execute("fileService", "init", function (event:Object) {
//                        loadServers();
//                    });
                    loadFiles();
                    return;
                }
                case 1: {
                    newService();
                    return;
                }
                case 4: {
                    var servletUploader:ServletUploader = new ServletUploader;
                    PopUpManager.addPopUp(servletUploader, FlexGlobals.topLevelApplication as DisplayObjectContainer, true);
                    PopUpManager.centerPopUp(servletUploader);
                    servletUploader.addEventListener(FileUploadEvent.UPLOAD_COMPLETE, fileUploadComplete);
//						servletUploader.multiFileUpload.addEventListener(FileUploadEvent.UPLOAD_SINGLE_FILE_COMPLETE,singleFileUploadFinished);
                    servletUploader.setFocus();
                    break;
                }
                case 7:
                    if (myFileGrid.selectedIndex != -1) {
                        if (!myFileGrid.selectedItem.filePath) {
                            Alert.show("请先上传程序文件,再发布.", "提示");
                            return;
                        }
                        var deployWin:AlertWindow = new AlertWindow();
                        deployWin.selItem = FileItem(myFileGrid.selectedItem);
                        deployWin.addEventListener("deployEvent", function (event:DeployEvent):void {
                            ArrayCollection(myFileGrid.dataProvider).itemUpdated(event.item, "relativeDeployTime");
                        });
                        PopUpManager.addPopUp(deployWin, FlexGlobals.topLevelApplication as DisplayObjectContainer, true);
                        PopUpManager.centerPopUp(deployWin);

                    }
                    break;
                case 8:
                    if (myFileGrid.selectedIndex != -1) {
                        navigateToURL(new URLRequest("download?id=" + myFileGrid.selectedItem["id"]), "_blank");
                    }
                    break;
            }

        }

        private function newService():void {
            var ns:NewService = new NewService();
            ns.serverDataList = ArrayCollection(serverList.dataProvider);
            ns.setFocus();

            PopUpManager.addPopUp(ns, Application.application as DisplayObject, true);
            PopUpManager.centerPopUp(ns);
        }


        protected function fileUploadComplete(event:FileUploadEvent):void {
            trace("上传完毕");
            loadFiles();
        }

        protected function filesize_labelFun(item:Object, column:DataGridColumn):String {
            if (!(item as FileItem).size) {
                return "0 Kb";
            }
            var kbNum:Number = (item as FileItem).size / 1024;
            var mbNum:Number = (item as FileItem).size / 1024 / 1024;
            if (new Number(mbNum.toFixed(0)) > 0) {
                return mbNum.toFixed(0) + " Mb";
            } else {
                return kbNum.toFixed(0) + " Kb";
            }
        }

        protected function _icon(item:Object):Class {
            return serverImg;
        }

        private function serverList_itemClickHandler(event:ListEvent):void {
            loadFiles();
        }

        private function view():void {
            if (myFileGrid.selectedIndex == -1) {
                return;
            }
            var popUp:DetailTitleWindow = new DetailTitleWindow();
            popUp.output = JSON.stringify(myFileGrid.selectedItem, null, "  ");
            popUp.setFocus();
            PopUpManager.addPopUp(popUp, FlexGlobals.topLevelApplication as DisplayObjectContainer, true)
            PopUpManager.centerPopUp(popUp)
        }
        ]]>
	</fx:Script>

    <fx:Declarations>
        <!-- 将非可视元素（例如服务、值对象）放在此处 -->
    </fx:Declarations>
    <mx:HDividedBox width="100%" height="100%">
        <mx:TileList id="serverList"
                     columnWidth="50"
                     itemClick="serverList_itemClickHandler(event)"
                     height="100%" width="160" fontSize="12" fontWeight="bold" labelField="Name" iconFunction="_icon">

        </mx:TileList>
        <mx:Box width="100%" height="100%">
            <mx:HBox width="100%">
                <mx:LinkBar id="linkButtonBar" height="100%" iconField="icon"
                            itemClick="linkButtonBar_itemClickHandler(event)">
                    <mx:dataProvider>
                        <s:ArrayCollection>
                            <fx:Object label="新建" itemData="1" icon="@Embed('/assets/img/add.png')"/>
                            <fx:Object label="刷新" itemData="100" icon="@Embed('/assets/img/qingkong.png')"/>
                            <fx:Object label="上传" itemData="4" icon="@Embed('/assets/img/filebrowser.gif')"/>
                            <fx:Object label="下载" itemData="8" icon="@Embed('/assets/img/bar_img/world.png')"/>
                            <fx:Object label="发布" itemData="7" icon="@Embed('/assets/img/exec.png')"/>
                        </s:ArrayCollection>
                    </mx:dataProvider>
                </mx:LinkBar>
                <components:SearchInput id="searchKey" width="200" textChange="filterResult()"/>
            </mx:HBox>
            <mx:DataGrid id="myFileGrid" width="100%" height="100%" itemDoubleClick="view()"
                         doubleClickEnabled="true">
                <mx:columns>
                    <mx:DataGridColumn width="60" dataField="server"
                                       headerText="服务器"/>
                    <mx:DataGridColumn width="150" dataField="serverAddress"
                                       headerText="IP地址"/>
                    <mx:DataGridColumn dataField="fileName"
                                       itemRenderer="com.github.izerui.file.controls.itemRender.FolderIconRender"
                                       headerText="服务文件"/>
                    <mx:DataGridColumn width="100" dataField="size"
                                       headerText="文件大小"
                                       labelFunction="filesize_labelFun"/>
                    <mx:DataGridColumn width="60" dataField="port"
                                       headerText="端口"/>
                    <mx:DataGridColumn width="200" dataField="url"
                                       headerText="服务地址"/>
                    <mx:DataGridColumn width="100" dataField="uploadTimeStr"
                                       headerText="上传时间"/>
                    <mx:DataGridColumn width="100" dataField="deployTimeStr"
                                       headerText="最后发布时间"/>
                    <mx:DataGridColumn width="60" dataField="status" textAlign="center"
                                       headerText="状态">
                        <mx:itemRenderer>
                            <fx:Component>
                                <mx:Label horizontalCenter="0" fontWeight="bold" text="{data.status}" color="0x008000"/>
                            </fx:Component>
                        </mx:itemRenderer>
                    </mx:DataGridColumn>
                </mx:columns>
            </mx:DataGrid>
        </mx:Box>
    </mx:HDividedBox>
</mx:VBox>
