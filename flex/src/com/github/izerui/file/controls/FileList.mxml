<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:searchinput="com.github.izerui.file.components.searchInput.*"
          creationComplete="panel1_creationCompleteHandler(event)">

    <fx:Script>
		<![CDATA[
        import com.github.izerui.file.components.loading.LoaderManager;
        import com.github.izerui.file.controls.titlewin.DeployTitleWindow;
        import com.github.izerui.file.controls.uploader.ServletUploader;
        import com.github.izerui.file.event.FileUploadEvent;
        import com.github.izerui.file.event.I18nEvent;
        import com.github.izerui.file.utils.AlertShow;
        import com.github.izerui.file.utils.RemoteObjectUtils;
        import com.github.izerui.file.vo.FileItem;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.FlexGlobals;
        import mx.events.FlexEvent;
        import mx.events.ItemClickEvent;
        import mx.events.ListEvent;
        import mx.formatters.DateFormatter;
        import mx.managers.PopUpManager;
        import mx.rpc.events.ResultEvent;
        import mx.utils.ObjectUtil;
        import mx.utils.URLUtil;

        private var dataList:ArrayCollection;

        public function loadFiles(selItem:FileItem = null):void {
            LoaderManager.showLoading();

            RemoteObjectUtils.execute("fileService", "listFiles", listFileResponse);

            function listFileResponse(event:ResultEvent):void {
                var data:ArrayCollection = ArrayCollection(event.result);
                searchKey.reset();
                LoaderManager.hideLoading();
                dataList = data;
                myFileGrid.dataProvider = dataList;

                if (selItem != null) {
                    for (var i = 0; i < data.length; i++) {
                        var item:FileItem = data[i];
                        if (item.filename == selItem.filename) {
                            myFileGrid.selectedIndex = i;
                            myFileGrid.scrollToIndex(i);
                            break;
                        }
                    }
                }
            }
        }


        protected function searchTextInputEvent(event:Event):void {
            if (!searchKey.text) {
                loadFiles();
                return;
            }
            var tempSearchList:ArrayCollection = new ArrayCollection;
            myFileGrid.dataProvider = tempSearchList;

            for each (var fi:FileItem in dataList) {
                if (fi.filename.indexOf(searchKey.text) != -1) {
                    tempSearchList.addItem(ObjectUtil.clone(fi));
                }
            }
        }

        private function formatDate(item:Object, column:DataGridColumn):String {
            var df:DateFormatter = new DateFormatter();
            df.formatString = "YYYY-MM-DD HH:NN:SS";
            return df.format(item[column.dataField]);// df是一个DateFormatter，这里格式化item数据中的startDate字段
        }

        protected function panel1_creationCompleteHandler(event:FlexEvent):void {
            resourceManager.addEventListener(I18nEvent.I18NRESOURCECHANGE, i18nResourceChange);
            loadFiles();
        }

        private function i18nResourceChange(event:I18nEvent):void {
            (linkButtonBar.dataProvider as ArrayCollection).refresh();
        }

        [Bindable]
        [Embed(source="/assets/img/bar_img/back.png")]
        private var button1_class:Class;

        protected function linkButtonBar_itemClickHandler(event:ItemClickEvent):void {
            switch (event.item["itemData"]) {
                case 2: {
                    loadFiles();
                    break;
                }
                case 4: {
                    var servletUploader:ServletUploader = new ServletUploader;
                    PopUpManager.addPopUp(servletUploader, FlexGlobals.topLevelApplication as DisplayObjectContainer, true);
                    PopUpManager.centerPopUp(servletUploader);
                    servletUploader.addEventListener(FileUploadEvent.UPLOAD_COMPLETE, fileUploadComplete);
//						servletUploader.multiFileUpload.addEventListener(FileUploadEvent.UPLOAD_SINGLE_FILE_COMPLETE,singleFileUploadFinished);
                    servletUploader.setFocus();
                    break;
                }
                case 7:

                    if (myFileGrid.selectedIndex != -1) {
                        var selItem:FileItem = FileItem(myFileGrid.selectedItem);
                        if (!selItem.isfolder) {
                            AlertShow.operateConfirm("确认发布服务?", "发布", FlexGlobals.topLevelApplication, exec);
                        }
                    }
                    break;
            }

            function exec():void {

                LoaderManager.showLoading();

                RemoteObjectUtils.execute("fileService", "exec", execResult, selItem.filename);

                function execResult(event:ResultEvent):void {
                    LoaderManager.hideLoading();
                    var output = String(event.result);
                    selItem["relativeDeployTime"] = "1秒前";
                    ArrayCollection(myFileGrid.dataProvider).itemUpdated(selItem, "relativeDeployTime");

                    var popUp:DeployTitleWindow = new DeployTitleWindow();
                    popUp.output = output ? output : "未知";
                    PopUpManager.addPopUp(popUp, FlexGlobals.topLevelApplication as DisplayObjectContainer, true)
                    PopUpManager.centerPopUp(popUp)
                }
            }

        }


        protected function fileUploadComplete(event:FileUploadEvent):void {
            // TODO Auto-generated method stub
            trace("上传完毕");
            loadFiles();
        }

        protected function filesize_labelFun(item:Object, column:DataGridColumn):String {
            return Number(((item as FileItem).size / 1024).toFixed(1)).toString();
        }

        private var fileReference:FileReference;

        private var isDownloading:Boolean = false;

        private function downloadFile(event:ListEvent):void {
            if (isDownloading) {
                Alert.show("正在下载,请稍等!", "信息");
                return;
            }
            // TODO Auto Generated method stub
            if (myFileGrid.selectedIndex != -1) {

                if (myFileGrid.selectedItem["isfolder"]) {
                    return;
                }
                if (!fileReference) {
                    fileReference = new FileReference();
                    fileReference.addEventListener(ProgressEvent.PROGRESS, onFileProgress);
                    fileReference.addEventListener(Event.COMPLETE, fileDownloadCompelete);
                    fileReference.addEventListener(IOErrorEvent.IO_ERROR, ioerrorDownload);
                    fileReference.addEventListener(Event.SELECT, filedownloadselect);
                }
                var xlsUrl:String = "download?path=" + encodeURI(myFileGrid.selectedItem["folderpath"]) + "&name=" + encodeURI(myFileGrid.selectedItem["filename"]);
                xlsUrl = URLUtil.getFullURL(this.parentApplication.url, xlsUrl);
                trace(xlsUrl);
                var fileUrlRequest:URLRequest = new URLRequest(xlsUrl);
                fileReference.download(fileUrlRequest, myFileGrid.selectedItem["filename"]);
            }

            //开始下载
            function filedownloadselect(event:Event):void {
                isDownloading = true;
                stopDownload.visible = true;
                downloadTootipLabel.visible = true;
            }

            //下载过程
            function onFileProgress(event:ProgressEvent):void {
                downloadTootipLabel.text = "下载文件:" + Number(event.bytesLoaded / 1024).toFixed(3) + " of " + Number(event.bytesTotal / 1024).toFixed(3) + " 字节";
            }

            //下载成功
            function fileDownloadCompelete(event:Event):void {
                // TODO Auto-generated method stub
                trace("下载成功");
                isDownloading = false;
                downloadTootipLabel.visible = false;
                stopDownload.visible = false;
            }

            //下载失败
            function ioerrorDownload(event:IOErrorEvent):void {
                // TODO Auto-generated method stub
                Alert.show(String(event), "出错了");
                isDownloading = false;
                downloadTootipLabel.visible = false;
                stopDownload.visible = false;
            }
        }


        protected function stopDownload_clickHandler(event:MouseEvent):void {
            // TODO Auto-generated method
            fileReference.cancel();
            isDownloading = false;
            downloadTootipLabel.visible = false;
            stopDownload.visible = false;
        }
        ]]>
	</fx:Script>

    <fx:Declarations>
        <!-- 将非可视元素（例如服务、值对象）放在此处 -->
    </fx:Declarations>
    <mx:DataGrid id="myFileGrid" width="100%" height="100%" itemDoubleClick="downloadFile(event)"
                 doubleClickEnabled="true">
        <mx:columns>
            <mx:DataGridColumn itemRenderer="com.github.izerui.file.controls.itemRender.FolderIconRender"
                               dataField="filename"
                               headerText="文件名"/>
            <mx:DataGridColumn width="150" dataField="size"
                               headerText="文件大小(KB)"
                               labelFunction="filesize_labelFun"/>
            <mx:DataGridColumn width="150" dataField="servers"
                               headerText="部署服务器"/>
            <mx:DataGridColumn width="150" dataField="relativeLashmodifyDate"
                               headerText="修改日期"/>
            <mx:DataGridColumn width="150" dataField="relativeDeployTime"
                               headerText="最后发布时间"/>
        </mx:columns>
    </mx:DataGrid>
    <mx:ControlBar>
        <mx:LinkBar id="linkButtonBar" iconField="ico" itemClick="linkButtonBar_itemClickHandler(event)">
            <mx:dataProvider>
                <s:ArrayCollection>
                    <fx:Object label="刷新" itemData="2"
                               ico="@Embed('/assets/img/bar_img/refresh.png')"/>
                    <fx:Object label="上传" itemData="4"
                               ico="@Embed('/assets/img/bar_img/upload.gif')"/>
                    <fx:Object label="发布" itemData="7"
                               ico="@Embed('/assets/img/bar_img/exec.png')"/>
                </s:ArrayCollection>
            </mx:dataProvider>
        </mx:LinkBar>
        <searchinput:SearchTextInput id="searchKey" width="200" change="searchTextInputEvent(event)"/>
        <mx:Label id="downloadTootipLabel" visible="false"/>
        <mx:LinkButton id="stopDownload" label="取消" visible="false"
                       click="stopDownload_clickHandler(event)"/>
    </mx:ControlBar>
</mx:VBox>
